-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

37ef69c5803d1528f163ac0b61474a9d52df3aec864150f8ba1543054360a437  rmdupe_1.0.3-1_all.deb
7dbffc0ee53be5ac3a16efb2c8eb47089bbeb007a1e93d8c330d35feab4cb7d8  rmdupe-1.0.3.tar.xz

#
# This file (rmdupe-1.0.3.SHA256.asc) is used to authenticate download of
# rmdupe version 1.0.3
# 
# Homepage: http://igurublog.wordpress.com/downloads/script-rmdupe/
# 
# 
# Why Authenticate?
# 
#   Verifying the authenticity of downloaded files prior to installation is
#   important to ensure that your download is not corrupt and that no one has
#   tampered with the server holding the files.
#
#
# 1) If you don't already have IgnorantGuru's CURRENT key on your keyring:
#
#   gpg --keyserver keys.gnupg.net --recv-keys 0x7977070A723C6CCB696C0B0227A5AC5A01937621
#     (if you receive an error, try again)
#     
#   Also visually verify that the given fingerprint matches the one shown here:
#     http://igurublog.wordpress.com/contact-ignorantguru/
#
#
# 2) Download one or more files (the first is required):
#
#   wget https://github.com/IgnorantGuru/rmdupe/raw/master/packages/1.0.3/rmdupe-1.0.3.SHA256.asc
#   wget https://github.com/IgnorantGuru/rmdupe/raw/master/packages/1.0.3/rmdupe_1.0.3-1_all.deb
#   wget https://github.com/IgnorantGuru/rmdupe/raw/master/packages/1.0.3/rmdupe-1.0.3.tar.xz
#
#
# 3) Check signature and files:
#
#   gpg -d rmdupe-1.0.3.SHA256.asc | sha256sum --check
#
#   This should report a good signature and an OK for each file present:  
#
#     gpg: Signature made <SIGNATURE DATE> using DSA key ID 01937621    <--
# --> rmdupe_1.0.3-1_all.deb: OK
# --> rmdupe-1.0.3.tar.xz: OK
# --> gpg: Good signature from IgnorantGuru <EMAIL>
#     gpg: WARNING: This key is not certified with a trusted signature!
#     gpg:          There is no indication that the signature belongs to the owner.
#     sha256sum: WARNING: x lines are improperly formatted
#
#   If "BAD signature" or the wrong key ID is reported, or if FAILED appears
#   next to any file you plan to use, DO NOT USE the file.  A "key is not
#   certified" warning (shown above) is normal and can be safely ignored if
#   you visually verified the key fingerprint in step 1.
#
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iF4EAREIAAYFAk9jyVoACgkQJ6WsWgGTdiEf9gD6Ag8Ljt87dCwcqqL+pga+/ZSs
lT0DCH3Klnue8CB2tywBALNX4jEUVo9XE9psyI46mpNPOxy3m8Ilk+vvdXU1OsZh
=tn80
-----END PGP SIGNATURE-----
